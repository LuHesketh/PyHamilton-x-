 
#ifndef __HSLMPELib__
  #define __HSLMPELib__ 1

  #ifndef __HAMILTON_MPE_DRIVER_DEPENDENCIES_hsl__
    #include "Dependencies\\Dependencies.hsl"
  #endif

namespace HSLMPELib
{
    // --------------------------------------------------------------------------------------
    // public constant declarations
    // --------------------------------------------------------------------------------------
    const variable _TRUE(HAMILTON_MPE_DEPENDENCIES::BOOL::TRUE);
    const variable _FALSE(HAMILTON_MPE_DEPENDENCIES::BOOL::FALSE);

    const variable SUCCESS(0);
    const variable ERROR(1);
	
    const variable TRACE_LEVEL_RELEASE(HAMILTON_MPE_DEPENDENCIES::TRACE_LEVEL::RELEASE);
    const variable TRACE_LEVEL_DEBUG(HAMILTON_MPE_DEPENDENCIES::TRACE_LEVEL::DEBUG);

    // --------------------------------------------------------------------------------------
    // private constant declarations
    // --------------------------------------------------------------------------------------
    private const variable INVALID_PARAM_TYPE_RET_CODE(1);
    private const variable EXTRACT_FUNC_NAME_FAIL_RET_CODE(1);
    private const variable INIT_LIBRARY_FAIL_RET_CODE(1);
    private const variable CREATE_OBJECT_FAIL_RET_CODE(1);
    private const variable DLL_ERROR_RET_CODE(1);

    // --------------------------------------------------------------------------------------
    // global constant/variable declarations
    // --------------------------------------------------------------------------------------
    static global variable  gHSLMPELib_blnInitialized               (_FALSE);
    static global variable  gHSLMPELib_intTraceLevel                (TRACE_LEVEL_DEBUG);
    static global variable  gHSLMPELib_strModuleName                ("Hamilton MPE");
    static global variable  gHSLMPELib_bOverrideSimulation          (_FALSE);
    static global variable  gHSLMPELib_bSimulated                   (_FALSE);
    static global object    gHSLMPELib_hdlCommunication;
    static global variable  gHSLMPELib_intLastReturnCode            (0);


    // --------------------------------------------------------------------------------------
    // public function declarations
    // --------------------------------------------------------------------------------------

    function ConnectUsingIP(variable i_stringInstrumentName, variable i_intPortNumber, variable i_boolSimulationMode, variable& o_intDeviceId, variable i_MpeOptions) variable;

    function ConnectUsingCOM(variable i_intComPort, variable i_intBaudRate, variable i_boolSimulationMode, variable& o_intDeviceId, variable i_MpeOptions) variable;

    function ClampFilterPlate(variable i_intDeviceId) variable;

    function CollectionPlatePlaced(variable i_intDeviceId, variable i_floatCollectionPlateHeight, variable i_floatOffsetFromNozzles) variable;

    function CollectionPlateRemoved(variable i_intDeviceId) variable;

    function Disconnect(variable i_intDeviceId) variable;

    function Initialize(variable i_intDeviceId) variable;

    function InitializeWithParameters(variable i_intDeviceId, variable i_boolSmart, variable i_intWasteContainerID, variable i_intVacuumRunTime, variable i_boolDisableVacuumCheck) variable;

    function IsInitialized(variable i_intDeviceId, variable& o_intIsInitialized) variable;

    function FilterPlatePlaced(variable i_intDeviceId, variable i_floatFilterHeight, variable i_floatNozzleHeight) variable;

    function FilterPlateRemoved(variable i_intDeviceId) variable;

    function ProcessFilterToCollectionPlate(variable i_intDeviceId, variable i_stringControlPoints, variable i_boolReturnPlateToIntegrationArea) variable;

    function ProcessFilterToWasteContainer(variable i_intDeviceId, variable i_stringControlPoints, variable i_boolReturnPlateToIntegrationArea, variable i_intWasteContainerID, variable i_boolDisableVacuumCheck) variable;

    function RetrieveFilterPlate(variable i_intDeviceId) variable;

    function StartVacuum(variable i_intDeviceId, variable i_intWasteContainerID, variable i_floatSeconds, variable i_boolDisableVacuumCheck) variable;

    function StartMPEVacuum(variable i_intDeviceId, variable i_intWasteContainerID, variable i_boolDisableVacuumCheck) variable;

    function StopVacuum(variable i_intDeviceId) variable;

    function GetVacuumStatus(variable i_intDeviceId, variable& o_intVacuumActive) variable;

    function GetPressureSensorReadings(variable i_intDeviceId, variable& o_floatInputPressureSensor, variable& o_floatManifoldPressureSensor, variable& o_floatHighPressureSensor, variable& o_floatLowPressureSensor) variable;

    function GetLastError(variable i_intDeviceId, variable i_intClearError, variable& o_stringErrorMessage) variable;

    function Dispense(variable i_intDeviceId, variable i_intSourceId, variable i_floatWellVolume, variable i_floatFlowRate, variable i_floatNeedleOffset) variable;

    function DispenseNonStandard(variable i_intDeviceId, variable i_intSourceId, variable i_floatWellVolume, variable i_floatFlowRate, variable i_floatNeedleOffset, variable i_floatEdgeToWellOffset, variable i_arrayWellToWellOffsets[]) variable;

    function CustomDispense(variable i_intDeviceId, variable i_intSourceId, variable i_floatWellVolume, variable i_floatFlowRateAspirate, variable i_floatFlowRateDispense, variable i_floatNeedleOffset, variable i_floatEdgeToWellOffset, variable i_arrayWellToWellOffsets[], variable i_intDelayBetweenAspirateAndDispense, variable i_intDelayBetweenDispenses) variable;

    function Prime(variable i_intDeviceId, variable i_intSourceId, variable i_floatWellVolume, variable i_floatFlowRate, variable i_intWasteContainerID) variable;

    function Flush(variable i_intDeviceId, variable i_floatWellVolume, variable i_floatFlowRate, variable i_intWasteContainerID) variable;

    function Evaporate(variable i_intDeviceId, variable i_floatPlateHeight, variable i_floatNeedleOffset, variable i_floatWellDepth, variable i_intEvaporateTime) variable;

    function EvaporateWithRate(variable i_intDeviceId, variable i_floatPlateHeight, variable i_floatNeedleOffset, variable i_floatEvaporatorTravelDistance, variable i_intEvaporateTime, variable i_floatFollowRate) variable;

    function EvaporatePrepare(variable i_intDeviceId, variable i_floatTemperature, variable i_floatPressure, variable i_intTimeout) variable;

    function EvaporateEnd(variable i_intDeviceId, variable i_intTimeout) variable;

    function GetTemperatureRange(variable i_intDeviceId, variable& o_floatMinimumTemperature, variable& o_floatMaximumTemperature) variable;

    function GetCurrentHeaterStatus(variable i_intDeviceId, variable i_boolReset, variable& o_floatCurrentEvaporatorTemperature, variable& o_floatCurrentGasTemperature, variable& o_intHeating) variable;

    function GetHeaterTemperatureRange(variable i_intDeviceId, variable i_boolReset, variable& o_floatMinimumEvaporatorTemperature, variable& o_floatMaximumEvaporatorTemperature, variable& o_floatMinimumGasTemperature, variable& o_floatMaximumGasTemperature, variable& o_floatTargetTemperature, variable& o_intHeating) variable;

    function SetSourceConfiguration(variable i_intDeviceId) variable;

    function GetSourceConfiguration(variable i_intDeviceId) variable;

    function ClearSourceConfiguration(variable i_intDeviceId, variable i_boolReset) variable;

    function StartContainerCalibration(variable i_intDeviceId, variable i_intSourceId, variable i_floatVolume) variable;

    function CancelContainerCalibration(variable i_intDeviceId, variable i_intSourceId) variable;

    function GetContainerCalibration(variable i_intDeviceId, variable i_intSourceId, variable& o_floatCapacityVolume, variable& o_intEmptyReading, variable& o_intFullReading, variable& o_stringCalibrationDate) variable;

    function MeasureEmptyContainer(variable i_intDeviceId, variable i_intSourceId, variable& o_intSensorReading) variable;

    function MeasureFullContainer(variable i_intDeviceId, variable i_intSourceId, variable& o_intSensorReading) variable;

    function SaveContainerCalibration(variable i_intDeviceId, variable i_intSourceId) variable;

    function IsConnected(variable i_intDeviceId, variable& o_intIsConnected) variable;


    // --------------------------------------------------------------------------------------
    // HSL public function declarations
    // --------------------------------------------------------------------------------------  

    function OverrideSimulation(variable i_boolSimulated) variable;

    function SetTraceLevel(variable i_intTraceLevel) variable;

    // --------------------------------------------------------------------------------------
    // HSL private function declarations
    // --------------------------------------------------------------------------------------

    private function SetLastReturnCodeAndReturn(variable i_intReturnCode) variable;

    private function _CleanUp() void;

    private function _InitializeLibrary(variable i_strCallingFunctionName) variable;

    private function _CreateObject(variable i_strCallingFunctionName) variable; 

    //##############################################################################################
    // CONNECT FUNCTION IMPLEMENTATIONS
    //##############################################################################################

    //----------------------------------------------------------------------------------------------
    // ConnectUsingIP
    //----------------------------------------------------------------------------------------------
    function ConnectUsingIP(variable i_stringInstrumentName, variable i_intPortNumber, variable i_boolSimulationMode, variable& o_intDeviceId, variable i_MpeOptions) variable
    {
      variable intReturnCode(0);
      variable strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckString(i_stringInstrumentName, "i_stringInstrumentName", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intPortNumber, "i_intPortNumber", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckBool(i_boolSimulationMode, "i_boolSimulationMode", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_stringInstrumentName = '" + i_stringInstrumentName + "'" + 
                                        ", i_intPortNumber = " + IStr(i_intPortNumber) + 
                                        ", i_boolSimulationMode = " + IStr(i_boolSimulationMode) + 
                                        ", i_MpeOptions = " + IStr(i_MpeOptions),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.ConnectUsingIP(i_stringInstrumentName, i_intPortNumber, i_boolSimulationMode, o_intDeviceId, i_MpeOptions);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if(intReturnCode != 0)
        {
          gHSLMPELib_hdlCommunication.GetLastError(0, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Unable to Connect Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }
        
        onerror goto 0;
      }
	  
      HAMILTON_MPE_DEPENDENCIES::FixInteropBool(i_boolSimulationMode);

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "o_intDeviceId = " + IStr(o_intDeviceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // ConnectUsingIP

    //----------------------------------------------------------------------------------------------
    // ConnectUsingCOM
    //----------------------------------------------------------------------------------------------
    function ConnectUsingCOM(variable i_intComPort, variable i_intBaudRate, variable i_boolSimulationMode, variable& o_intDeviceId, variable i_MpeOptions) variable
    {
      variable intReturnCode(0);
      variable strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intComPort, "i_intComPort", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intBaudRate, "i_intBaudRate", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckBool(i_boolSimulationMode, "i_boolSimulationMode", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intComPort = " + IStr(i_intComPort) + 
                                        ", i_intBaudRate = " + IStr(i_intBaudRate) + 
                                        ", i_boolSimulationMode = " + IStr(i_boolSimulationMode) + 
                                        ", i_MpeOptions = " + IStr(i_MpeOptions),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.ConnectUsingCOM(i_intComPort, i_intBaudRate, i_boolSimulationMode, o_intDeviceId, i_MpeOptions);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if(intReturnCode != 0)
        {
          gHSLMPELib_hdlCommunication.GetLastError(0, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Unable to Connect Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }
        
        onerror goto 0;
      }
	  
      HAMILTON_MPE_DEPENDENCIES::FixInteropBool(i_boolSimulationMode);

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "o_intDeviceId = " + IStr(o_intDeviceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // ConnectUsingCOM
	
    //##############################################################################################
    // DEVICE SPECIFIC FUNCTION IMPLEMENTATIONS
    //##############################################################################################

    //----------------------------------------------------------------------------------------------
    // ClampFilterPlate
    //----------------------------------------------------------------------------------------------
    function ClampFilterPlate(variable i_intDeviceId) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.ClampFilterPlate(i_intDeviceId);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // ClampFilterPlate

    //----------------------------------------------------------------------------------------------
    // CollectionPlatePlaced
    //----------------------------------------------------------------------------------------------
    function CollectionPlatePlaced(variable i_intDeviceId, variable i_floatCollectionPlateHeight, variable i_floatOffsetFromNozzles) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatCollectionPlateHeight, "i_floatCollectionPlateHeight", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatOffsetFromNozzles, "i_floatOffsetFromNozzles", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_floatCollectionPlateHeight = " + FStr(i_floatCollectionPlateHeight) + 
                                        ", i_floatOffsetFromNozzles = " + FStr(i_floatOffsetFromNozzles),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.CollectionPlatePlaced(i_intDeviceId, i_floatCollectionPlateHeight, i_floatOffsetFromNozzles);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // CollectionPlatePlaced

    //----------------------------------------------------------------------------------------------
    // CollectionPlateRemoved
    //----------------------------------------------------------------------------------------------
    function CollectionPlateRemoved(variable i_intDeviceId) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.CollectionPlateRemoved(i_intDeviceId);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // CollectionPlateRemoved

    //----------------------------------------------------------------------------------------------
    // Disconnect
    //----------------------------------------------------------------------------------------------
    function Disconnect(variable i_intDeviceId) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.Disconnect(i_intDeviceId);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // Disconnect

    //----------------------------------------------------------------------------------------------
    // Initialize
    //----------------------------------------------------------------------------------------------
    function Initialize(variable i_intDeviceId) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.Initialize(i_intDeviceId);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // Initialize

    //----------------------------------------------------------------------------------------------
    // InitializeWithParameters
    //----------------------------------------------------------------------------------------------
    function InitializeWithParameters(variable i_intDeviceId, variable i_boolSmart, variable i_intWasteContainerID, variable i_intVacuumRunTime, variable i_boolDisableVacuumCheck) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckBool(i_boolSmart, "i_boolSmart", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intWasteContainerID, "i_intWasteContainerID", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intVacuumRunTime, "i_intVacuumRunTime", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckBool(i_boolDisableVacuumCheck, "i_boolDisableVacuumCheck", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_boolSmart = " + IStr(i_boolSmart) + 
                                        ", i_intWasteContainerID = " + IStr(i_intWasteContainerID) + 
                                        ", i_intVacuumRunTime = " + IStr(i_intVacuumRunTime) + 
                                        ", i_boolDisableVacuumCheck = " + IStr(i_boolDisableVacuumCheck),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.InitializeWithParameters(i_intDeviceId, i_boolSmart, i_intWasteContainerID, i_intVacuumRunTime, i_boolDisableVacuumCheck);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  
      HAMILTON_MPE_DEPENDENCIES::FixInteropBool(i_boolSmart);
      HAMILTON_MPE_DEPENDENCIES::FixInteropBool(i_boolDisableVacuumCheck);

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // InitializeWithParameters

    //----------------------------------------------------------------------------------------------
    // IsInitialized
    //----------------------------------------------------------------------------------------------
    function IsInitialized(variable i_intDeviceId, variable& o_intIsInitialized) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.IsInitialized(i_intDeviceId, o_intIsInitialized);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "o_intIsInitialized = " + IStr(o_intIsInitialized),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // IsInitialized

    //----------------------------------------------------------------------------------------------
    // FilterPlatePlaced
    //----------------------------------------------------------------------------------------------
    function FilterPlatePlaced(variable i_intDeviceId, variable i_floatFilterHeight, variable i_floatNozzleHeight) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatFilterHeight, "i_floatFilterHeight", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatNozzleHeight, "i_floatNozzleHeight", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_floatFilterHeight = " + FStr(i_floatFilterHeight) + 
                                        ", i_floatNozzleHeight = " + FStr(i_floatNozzleHeight),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.FilterPlatePlaced(i_intDeviceId, i_floatFilterHeight, i_floatNozzleHeight);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // FilterPlatePlaced

    //----------------------------------------------------------------------------------------------
    // FilterPlateRemoved
    //----------------------------------------------------------------------------------------------
    function FilterPlateRemoved(variable i_intDeviceId) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.FilterPlateRemoved(i_intDeviceId);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // FilterPlateRemoved

    //----------------------------------------------------------------------------------------------
    // ProcessFilterToCollectionPlate
    //----------------------------------------------------------------------------------------------
    function ProcessFilterToCollectionPlate(variable i_intDeviceId, variable i_stringControlPoints, variable i_boolReturnPlateToIntegrationArea) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckString(i_stringControlPoints, "i_stringControlPoints", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckBool(i_boolReturnPlateToIntegrationArea, "i_boolReturnPlateToIntegrationArea", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_stringControlPoints = '" + i_stringControlPoints + "'" + 
                                        ", i_boolReturnPlateToIntegrationArea = " + IStr(i_boolReturnPlateToIntegrationArea),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.ProcessFilterToCollectionPlate(i_intDeviceId, i_stringControlPoints, i_boolReturnPlateToIntegrationArea);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  
      HAMILTON_MPE_DEPENDENCIES::FixInteropBool(i_boolReturnPlateToIntegrationArea);

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // ProcessFilterToCollectionPlate

    //----------------------------------------------------------------------------------------------
    // ProcessFilterToWasteContainer
    //----------------------------------------------------------------------------------------------
    function ProcessFilterToWasteContainer(variable i_intDeviceId, variable i_stringControlPoints, variable i_boolReturnPlateToIntegrationArea, variable i_intWasteContainerID, variable i_boolDisableVacuumCheck) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckString(i_stringControlPoints, "i_stringControlPoints", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckBool(i_boolReturnPlateToIntegrationArea, "i_boolReturnPlateToIntegrationArea", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intWasteContainerID, "i_intWasteContainerID", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckBool(i_boolDisableVacuumCheck, "i_boolDisableVacuumCheck", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_stringControlPoints = '" + i_stringControlPoints + "'" + 
                                        ", i_boolReturnPlateToIntegrationArea = " + IStr(i_boolReturnPlateToIntegrationArea) + 
                                        ", i_intWasteContainerID = " + IStr(i_intWasteContainerID) + 
                                        ", i_boolDisableVacuumCheck = " + IStr(i_boolDisableVacuumCheck),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.ProcessFilterToWasteContainer(i_intDeviceId, i_stringControlPoints, i_boolReturnPlateToIntegrationArea, i_intWasteContainerID, i_boolDisableVacuumCheck);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  
      HAMILTON_MPE_DEPENDENCIES::FixInteropBool(i_boolReturnPlateToIntegrationArea);
      HAMILTON_MPE_DEPENDENCIES::FixInteropBool(i_boolDisableVacuumCheck);

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // ProcessFilterToWasteContainer

    //----------------------------------------------------------------------------------------------
    // RetrieveFilterPlate
    //----------------------------------------------------------------------------------------------
    function RetrieveFilterPlate(variable i_intDeviceId) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.RetrieveFilterPlate(i_intDeviceId);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // RetrieveFilterPlate

    //----------------------------------------------------------------------------------------------
    // StartVacuum
    //----------------------------------------------------------------------------------------------
    function StartVacuum(variable i_intDeviceId, variable i_intWasteContainerID, variable i_floatSeconds, variable i_boolDisableVacuumCheck) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intWasteContainerID, "i_intWasteContainerID", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatSeconds, "i_floatSeconds", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckBool(i_boolDisableVacuumCheck, "i_boolDisableVacuumCheck", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_intWasteContainerID = " + IStr(i_intWasteContainerID) + 
                                        ", i_floatSeconds = " + FStr(i_floatSeconds) + 
                                        ", i_boolDisableVacuumCheck = " + IStr(i_boolDisableVacuumCheck),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.StartVacuum(i_intDeviceId, i_intWasteContainerID, i_floatSeconds, i_boolDisableVacuumCheck);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  
      HAMILTON_MPE_DEPENDENCIES::FixInteropBool(i_boolDisableVacuumCheck);

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // StartVacuum

    //----------------------------------------------------------------------------------------------
    // StartMPEVacuum
    //----------------------------------------------------------------------------------------------
    function StartMPEVacuum(variable i_intDeviceId, variable i_intWasteContainerID, variable i_boolDisableVacuumCheck) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intWasteContainerID, "i_intWasteContainerID", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckBool(i_boolDisableVacuumCheck, "i_boolDisableVacuumCheck", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_intWasteContainerID = " + IStr(i_intWasteContainerID) + 
                                        ", i_boolDisableVacuumCheck = " + IStr(i_boolDisableVacuumCheck),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.StartMPEVacuum(i_intDeviceId, i_intWasteContainerID, i_boolDisableVacuumCheck);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  
      HAMILTON_MPE_DEPENDENCIES::FixInteropBool(i_boolDisableVacuumCheck);

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // StartMPEVacuum

    //----------------------------------------------------------------------------------------------
    // StopVacuum
    //----------------------------------------------------------------------------------------------
    function StopVacuum(variable i_intDeviceId) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.StopVacuum(i_intDeviceId);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // StopVacuum

    //----------------------------------------------------------------------------------------------
    // GetVacuumStatus
    //----------------------------------------------------------------------------------------------
    function GetVacuumStatus(variable i_intDeviceId, variable& o_intVacuumActive) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.GetVacuumStatus(i_intDeviceId, o_intVacuumActive);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "o_intVacuumActive = " + IStr(o_intVacuumActive),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // GetVacuumStatus

    //----------------------------------------------------------------------------------------------
    // GetPressureSensorReadings
    //----------------------------------------------------------------------------------------------
    function GetPressureSensorReadings(variable i_intDeviceId, variable& o_floatInputPressureSensor, variable& o_floatManifoldPressureSensor, variable& o_floatHighPressureSensor, variable& o_floatLowPressureSensor) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.GetPressureSensorReadings(i_intDeviceId, o_floatInputPressureSensor, o_floatManifoldPressureSensor, o_floatHighPressureSensor, o_floatLowPressureSensor);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "o_floatInputPressureSensor = " + FStr(o_floatInputPressureSensor) + 
                                        ", o_floatManifoldPressureSensor = " + FStr(o_floatManifoldPressureSensor) + 
                                        ", o_floatHighPressureSensor = " + FStr(o_floatHighPressureSensor) + 
                                        ", o_floatLowPressureSensor = " + FStr(o_floatLowPressureSensor),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // GetPressureSensorReadings

    //----------------------------------------------------------------------------------------------
    // GetLastError
    //----------------------------------------------------------------------------------------------
    function GetLastError(variable i_intDeviceId, variable i_intClearError, variable& o_stringErrorMessage) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intClearError, "i_intClearError", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_intClearError = " + IStr(i_intClearError),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, i_intClearError, o_stringErrorMessage);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "o_stringErrorMessage = '" + o_stringErrorMessage + "'",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // GetLastError

    //----------------------------------------------------------------------------------------------
    // Dispense
    //----------------------------------------------------------------------------------------------
    function Dispense(variable i_intDeviceId, variable i_intSourceId, variable i_floatWellVolume, variable i_floatFlowRate, variable i_floatNeedleOffset) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intSourceId, "i_intSourceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatWellVolume, "i_floatWellVolume", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatFlowRate, "i_floatFlowRate", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatNeedleOffset, "i_floatNeedleOffset", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_intSourceId = " + IStr(i_intSourceId) + 
                                        ", i_floatWellVolume = " + FStr(i_floatWellVolume) + 
                                        ", i_floatFlowRate = " + FStr(i_floatFlowRate) + 
                                        ", i_floatNeedleOffset = " + FStr(i_floatNeedleOffset),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.Dispense(i_intDeviceId, i_intSourceId, i_floatWellVolume, i_floatFlowRate, i_floatNeedleOffset);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // Dispense

    //----------------------------------------------------------------------------------------------
    // DispenseNonStandard
    //----------------------------------------------------------------------------------------------
    function DispenseNonStandard(variable i_intDeviceId, variable i_intSourceId, variable i_floatWellVolume, variable i_floatFlowRate, variable i_floatNeedleOffset, variable i_floatEdgeToWellOffset, variable i_arrayWellToWellOffsets[]) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intSourceId, "i_intSourceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatWellVolume, "i_floatWellVolume", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatFlowRate, "i_floatFlowRate", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatNeedleOffset, "i_floatNeedleOffset", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatEdgeToWellOffset, "i_floatEdgeToWellOffset", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_intSourceId = " + IStr(i_intSourceId) + 
                                        ", i_floatWellVolume = " + FStr(i_floatWellVolume) + 
                                        ", i_floatFlowRate = " + FStr(i_floatFlowRate) + 
                                        ", i_floatNeedleOffset = " + FStr(i_floatNeedleOffset) + 
                                        ", i_floatEdgeToWellOffset = " + FStr(i_floatEdgeToWellOffset),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.DispenseNonStandard(i_intDeviceId, i_intSourceId, i_floatWellVolume, i_floatFlowRate, i_floatNeedleOffset, i_floatEdgeToWellOffset, i_arrayWellToWellOffsets);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // DispenseNonStandard

    //----------------------------------------------------------------------------------------------
    // CustomDispense
    //----------------------------------------------------------------------------------------------
    function CustomDispense(variable i_intDeviceId, variable i_intSourceId, variable i_floatWellVolume, variable i_floatFlowRateAspirate, variable i_floatFlowRateDispense, variable i_floatNeedleOffset, variable i_floatEdgeToWellOffset, variable i_arrayWellToWellOffsets[], variable i_intDelayBetweenAspirateAndDispense, variable i_intDelayBetweenDispenses) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intSourceId, "i_intSourceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatWellVolume, "i_floatWellVolume", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatFlowRateAspirate, "i_floatFlowRateAspirate", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatFlowRateDispense, "i_floatFlowRateDispense", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatNeedleOffset, "i_floatNeedleOffset", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatEdgeToWellOffset, "i_floatEdgeToWellOffset", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDelayBetweenAspirateAndDispense, "i_intDelayBetweenAspirateAndDispense", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDelayBetweenDispenses, "i_intDelayBetweenDispenses", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_intSourceId = " + IStr(i_intSourceId) + 
                                        ", i_floatWellVolume = " + FStr(i_floatWellVolume) + 
                                        ", i_floatFlowRateAspirate = " + FStr(i_floatFlowRateAspirate) + 
                                        ", i_floatFlowRateDispense = " + FStr(i_floatFlowRateDispense) + 
                                        ", i_floatNeedleOffset = " + FStr(i_floatNeedleOffset) + 
                                        ", i_floatEdgeToWellOffset = " + FStr(i_floatEdgeToWellOffset) + 
                                        ", i_intDelayBetweenAspirateAndDispense = " + IStr(i_intDelayBetweenAspirateAndDispense) + 
                                        ", i_intDelayBetweenDispenses = " + IStr(i_intDelayBetweenDispenses),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.CustomDispense(i_intDeviceId, i_intSourceId, i_floatWellVolume, i_floatFlowRateAspirate, i_floatFlowRateDispense, i_floatNeedleOffset, i_floatEdgeToWellOffset, i_arrayWellToWellOffsets, i_intDelayBetweenAspirateAndDispense, i_intDelayBetweenDispenses);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // CustomDispense

    //----------------------------------------------------------------------------------------------
    // Prime
    //----------------------------------------------------------------------------------------------
    function Prime(variable i_intDeviceId, variable i_intSourceId, variable i_floatWellVolume, variable i_floatFlowRate, variable i_intWasteContainerID) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intSourceId, "i_intSourceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatWellVolume, "i_floatWellVolume", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatFlowRate, "i_floatFlowRate", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intWasteContainerID, "i_intWasteContainerID", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_intSourceId = " + IStr(i_intSourceId) + 
                                        ", i_floatWellVolume = " + FStr(i_floatWellVolume) + 
                                        ", i_floatFlowRate = " + FStr(i_floatFlowRate) + 
                                        ", i_intWasteContainerID = " + IStr(i_intWasteContainerID),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.Prime(i_intDeviceId, i_intSourceId, i_floatWellVolume, i_floatFlowRate, i_intWasteContainerID);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // Prime

    //----------------------------------------------------------------------------------------------
    // Flush
    //----------------------------------------------------------------------------------------------
    function Flush(variable i_intDeviceId, variable i_floatWellVolume, variable i_floatFlowRate, variable i_intWasteContainerID) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatWellVolume, "i_floatWellVolume", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatFlowRate, "i_floatFlowRate", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intWasteContainerID, "i_intWasteContainerID", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_floatWellVolume = " + FStr(i_floatWellVolume) + 
                                        ", i_floatFlowRate = " + FStr(i_floatFlowRate) + 
                                        ", i_intWasteContainerID = " + IStr(i_intWasteContainerID),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.Flush(i_intDeviceId, i_floatWellVolume, i_floatFlowRate, i_intWasteContainerID);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // Flush

    //----------------------------------------------------------------------------------------------
    // Evaporate
    //----------------------------------------------------------------------------------------------
    function Evaporate(variable i_intDeviceId, variable i_floatPlateHeight, variable i_floatNeedleOffset, variable i_floatWellDepth, variable i_intEvaporateTime) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatPlateHeight, "i_floatPlateHeight", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatNeedleOffset, "i_floatNeedleOffset", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatWellDepth, "i_floatWellDepth", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intEvaporateTime, "i_intEvaporateTime", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_floatPlateHeight = " + FStr(i_floatPlateHeight) + 
                                        ", i_floatNeedleOffset = " + FStr(i_floatNeedleOffset) + 
                                        ", i_floatWellDepth = " + FStr(i_floatWellDepth) + 
                                        ", i_intEvaporateTime = " + IStr(i_intEvaporateTime),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.Evaporate(i_intDeviceId, i_floatPlateHeight, i_floatNeedleOffset, i_floatWellDepth, i_intEvaporateTime);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // Evaporate

    //----------------------------------------------------------------------------------------------
    // EvaporateWithRate
    //----------------------------------------------------------------------------------------------
    function EvaporateWithRate(variable i_intDeviceId, variable i_floatPlateHeight, variable i_floatNeedleOffset, variable i_floatEvaporatorTravelDistance, variable i_intEvaporateTime, variable i_floatFollowRate) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatPlateHeight, "i_floatPlateHeight", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatNeedleOffset, "i_floatNeedleOffset", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatEvaporatorTravelDistance, "i_floatEvaporatorTravelDistance", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intEvaporateTime, "i_intEvaporateTime", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatFollowRate, "i_floatFollowRate", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_floatPlateHeight = " + FStr(i_floatPlateHeight) + 
                                        ", i_floatNeedleOffset = " + FStr(i_floatNeedleOffset) + 
                                        ", i_floatEvaporatorTravelDistance = " + FStr(i_floatEvaporatorTravelDistance) + 
                                        ", i_intEvaporateTime = " + IStr(i_intEvaporateTime) + 
                                        ", i_floatFollowRate = " + FStr(i_floatFollowRate),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.EvaporateWithRate(i_intDeviceId, i_floatPlateHeight, i_floatNeedleOffset, i_floatEvaporatorTravelDistance, i_intEvaporateTime, i_floatFollowRate);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // EvaporateWithRate

    //----------------------------------------------------------------------------------------------
    // EvaporatePrepare
    //----------------------------------------------------------------------------------------------
    function EvaporatePrepare(variable i_intDeviceId, variable i_floatTemperature, variable i_floatPressure, variable i_intTimeout) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatTemperature, "i_floatTemperature", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatPressure, "i_floatPressure", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intTimeout, "i_intTimeout", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_floatTemperature = " + FStr(i_floatTemperature) + 
                                        ", i_floatPressure = " + FStr(i_floatPressure) + 
                                        ", i_intTimeout = " + IStr(i_intTimeout),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.EvaporatePrepare(i_intDeviceId, i_floatTemperature, i_floatPressure, i_intTimeout);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // EvaporatePrepare

    //----------------------------------------------------------------------------------------------
    // EvaporateEnd
    //----------------------------------------------------------------------------------------------
    function EvaporateEnd(variable i_intDeviceId, variable i_intTimeout) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intTimeout, "i_intTimeout", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_intTimeout = " + IStr(i_intTimeout),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.EvaporateEnd(i_intDeviceId, i_intTimeout);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // EvaporateEnd

    //----------------------------------------------------------------------------------------------
    // GetTemperatureRange
    //----------------------------------------------------------------------------------------------
    function GetTemperatureRange(variable i_intDeviceId, variable& o_floatMinimumTemperature, variable& o_floatMaximumTemperature) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.GetTemperatureRange(i_intDeviceId, o_floatMinimumTemperature, o_floatMaximumTemperature);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "o_floatMinimumTemperature = " + FStr(o_floatMinimumTemperature) + 
                                        ", o_floatMaximumTemperature = " + FStr(o_floatMaximumTemperature),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // GetTemperatureRange

    //----------------------------------------------------------------------------------------------
    // GetCurrentHeaterStatus
    //----------------------------------------------------------------------------------------------
    function GetCurrentHeaterStatus(variable i_intDeviceId, variable i_boolReset, variable& o_floatCurrentEvaporatorTemperature, variable& o_floatCurrentGasTemperature, variable& o_intHeating) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckBool(i_boolReset, "i_boolReset", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_boolReset = " + IStr(i_boolReset),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.GetCurrentHeaterStatus(i_intDeviceId, i_boolReset, o_floatCurrentEvaporatorTemperature, o_floatCurrentGasTemperature, o_intHeating);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  
      HAMILTON_MPE_DEPENDENCIES::FixInteropBool(i_boolReset);

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "o_floatCurrentEvaporatorTemperature = " + FStr(o_floatCurrentEvaporatorTemperature) + 
                                        ", o_floatCurrentGasTemperature = " + FStr(o_floatCurrentGasTemperature) + 
                                        ", o_intHeating = " + IStr(o_intHeating),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // GetCurrentHeaterStatus

    //----------------------------------------------------------------------------------------------
    // GetHeaterTemperatureRange
    //----------------------------------------------------------------------------------------------
    function GetHeaterTemperatureRange(variable i_intDeviceId, variable i_boolReset, variable& o_floatMinimumEvaporatorTemperature, variable& o_floatMaximumEvaporatorTemperature, variable& o_floatMinimumGasTemperature, variable& o_floatMaximumGasTemperature, variable& o_floatTargetTemperature, variable& o_intHeating) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckBool(i_boolReset, "i_boolReset", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_boolReset = " + IStr(i_boolReset),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.GetHeaterTemperatureRange(i_intDeviceId, i_boolReset, o_floatMinimumEvaporatorTemperature, o_floatMaximumEvaporatorTemperature, o_floatMinimumGasTemperature, o_floatMaximumGasTemperature, o_floatTargetTemperature, o_intHeating);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  
      HAMILTON_MPE_DEPENDENCIES::FixInteropBool(i_boolReset);

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "o_floatMinimumEvaporatorTemperature = " + FStr(o_floatMinimumEvaporatorTemperature) + 
                                        ", o_floatMaximumEvaporatorTemperature = " + FStr(o_floatMaximumEvaporatorTemperature) + 
                                        ", o_floatMinimumGasTemperature = " + FStr(o_floatMinimumGasTemperature) + 
                                        ", o_floatMaximumGasTemperature = " + FStr(o_floatMaximumGasTemperature) + 
                                        ", o_floatTargetTemperature = " + FStr(o_floatTargetTemperature) + 
                                        ", o_intHeating = " + IStr(o_intHeating),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // GetHeaterTemperatureRange

    //----------------------------------------------------------------------------------------------
    // SetSourceConfiguration
    //----------------------------------------------------------------------------------------------
    function SetSourceConfiguration(variable i_intDeviceId) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.SetSourceConfiguration(i_intDeviceId);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // SetSourceConfiguration

    //----------------------------------------------------------------------------------------------
    // GetSourceConfiguration
    //----------------------------------------------------------------------------------------------
    function GetSourceConfiguration(variable i_intDeviceId) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.GetSourceConfiguration(i_intDeviceId);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // GetSourceConfiguration

    //----------------------------------------------------------------------------------------------
    // ClearSourceConfiguration
    //----------------------------------------------------------------------------------------------
    function ClearSourceConfiguration(variable i_intDeviceId, variable i_boolReset) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckBool(i_boolReset, "i_boolReset", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_boolReset = " + IStr(i_boolReset),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.ClearSourceConfiguration(i_intDeviceId, i_boolReset);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  
      HAMILTON_MPE_DEPENDENCIES::FixInteropBool(i_boolReset);

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // ClearSourceConfiguration

    //----------------------------------------------------------------------------------------------
    // StartContainerCalibration
    //----------------------------------------------------------------------------------------------
    function StartContainerCalibration(variable i_intDeviceId, variable i_intSourceId, variable i_floatVolume) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intSourceId, "i_intSourceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckFloat(i_floatVolume, "i_floatVolume", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_intSourceId = " + IStr(i_intSourceId) + 
                                        ", i_floatVolume = " + FStr(i_floatVolume),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.StartContainerCalibration(i_intDeviceId, i_intSourceId, i_floatVolume);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // StartContainerCalibration

    //----------------------------------------------------------------------------------------------
    // CancelContainerCalibration
    //----------------------------------------------------------------------------------------------
    function CancelContainerCalibration(variable i_intDeviceId, variable i_intSourceId) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intSourceId, "i_intSourceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_intSourceId = " + IStr(i_intSourceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.CancelContainerCalibration(i_intDeviceId, i_intSourceId);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // CancelContainerCalibration

    //----------------------------------------------------------------------------------------------
    // GetContainerCalibration
    //----------------------------------------------------------------------------------------------
    function GetContainerCalibration(variable i_intDeviceId, variable i_intSourceId, variable& o_floatCapacityVolume, variable& o_intEmptyReading, variable& o_intFullReading, variable& o_stringCalibrationDate) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intSourceId, "i_intSourceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_intSourceId = " + IStr(i_intSourceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.GetContainerCalibration(i_intDeviceId, i_intSourceId, o_floatCapacityVolume, o_intEmptyReading, o_intFullReading, o_stringCalibrationDate);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "o_floatCapacityVolume = " + FStr(o_floatCapacityVolume) + 
                                        ", o_intEmptyReading = " + IStr(o_intEmptyReading) + 
                                        ", o_intFullReading = " + IStr(o_intFullReading) + 
                                        ", o_stringCalibrationDate = '" + o_stringCalibrationDate + "'",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // GetContainerCalibration

    //----------------------------------------------------------------------------------------------
    // MeasureEmptyContainer
    //----------------------------------------------------------------------------------------------
    function MeasureEmptyContainer(variable i_intDeviceId, variable i_intSourceId, variable& o_intSensorReading) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intSourceId, "i_intSourceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_intSourceId = " + IStr(i_intSourceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.MeasureEmptyContainer(i_intDeviceId, i_intSourceId, o_intSensorReading);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "o_intSensorReading = " + IStr(o_intSensorReading),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // MeasureEmptyContainer

    //----------------------------------------------------------------------------------------------
    // MeasureFullContainer
    //----------------------------------------------------------------------------------------------
    function MeasureFullContainer(variable i_intDeviceId, variable i_intSourceId, variable& o_intSensorReading) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intSourceId, "i_intSourceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_intSourceId = " + IStr(i_intSourceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.MeasureFullContainer(i_intDeviceId, i_intSourceId, o_intSensorReading);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "o_intSensorReading = " + IStr(o_intSensorReading),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // MeasureFullContainer

    //----------------------------------------------------------------------------------------------
    // SaveContainerCalibration
    //----------------------------------------------------------------------------------------------
    function SaveContainerCalibration(variable i_intDeviceId, variable i_intSourceId) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intSourceId, "i_intSourceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId) + 
                                        ", i_intSourceId = " + IStr(i_intSourceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.SaveContainerCalibration(i_intDeviceId, i_intSourceId);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // SaveContainerCalibration

    //----------------------------------------------------------------------------------------------
    // IsConnected
    //----------------------------------------------------------------------------------------------
    function IsConnected(variable i_intDeviceId, variable& o_intIsConnected) variable
    {
      variable intReturnCode(0);
      string strFunctionName("");
      variable strErrorMsg("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

	   if(HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intDeviceId, "i_intDeviceId", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intDeviceId = " + IStr(i_intDeviceId),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      if(!_InitializeLibrary(strFunctionName)) return(SetLastReturnCodeAndReturn(INIT_LIBRARY_FAIL_RET_CODE));

      if((gHSLMPELib_bOverrideSimulation && gHSLMPELib_bSimulated) ||
         (!gHSLMPELib_bOverrideSimulation && (GetSimulationMode() == 1)))
      {
        return(SUCCESS);
      }
      else
      {
        onerror goto DLL_ERROR;

        if (gHSLMPELib_hdlCommunication.IsNull())
        {
          if (_CreateObject(strFunctionName) == _FALSE) return(SetLastReturnCodeAndReturn(CREATE_OBJECT_FAIL_RET_CODE));
        }
        
        if (!gHSLMPELib_hdlCommunication.IsNull())
        {
          intReturnCode = gHSLMPELib_hdlCommunication.IsConnected(i_intDeviceId, o_intIsConnected);
        }

        gHSLMPELib_intLastReturnCode = intReturnCode;

        if (intReturnCode != 0)
        {
          if (strFunctionName.Compare("Disconnect") == 0 || strFunctionName.Compare("GetLastError") == 0)
          {
            i_intDeviceId = 0;
          }

          gHSLMPELib_hdlCommunication.GetLastError(i_intDeviceId, 0, strErrorMsg);
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Failed to execute, return code: " + IStr(intReturnCode) + "!" +
                                            "  Error: " + strErrorMsg,
                                            strFunctionName,
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);

          return(gHSLMPELib_intLastReturnCode);
        }

        onerror goto 0;
      }
	  

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "o_intIsConnected = " + IStr(o_intIsConnected),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);


      return(SUCCESS);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          strFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        gHSLMPELib_intLastReturnCode = DLL_ERROR_RET_CODE;

        return(gHSLMPELib_intLastReturnCode);
      }
    } // IsConnected

    //##############################################################################################
    // PUBLIC HSL FUNCTION IMPLEMENTATIONS
    //##############################################################################################

    //----------------------------------------------------------------------------------------------
    // function OverrideSimulation
    //----------------------------------------------------------------------------------------------
    function OverrideSimulation(variable i_boolSimulated) variable
    {
      variable strFunctionName("");

      if (HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

      if (HAMILTON_MPE_DEPENDENCIES::CheckBool(i_boolSimulated, "i_boolSimulated", strFunctionName, gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      gHSLMPELib_bOverrideSimulation = _TRUE;

      gHSLMPELib_bSimulated = i_boolSimulated;

      return(SUCCESS);
    } // OverrideSimulation

    //----------------------------------------------------------------------------------------------
    // function SetTraceLevel
    //----------------------------------------------------------------------------------------------
    function SetTraceLevel(variable i_intTraceLevel) variable
    {
      variable strFunctionName("");

      if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(EXTRACT_FUNC_NAME_FAIL_RET_CODE));

      if(HAMILTON_MPE_DEPENDENCIES::CheckIntegerRange(i_intTraceLevel,
                                                 "i_intTraceLevel",
                                                 TRACE_LEVEL_RELEASE,
                                                 TRACE_LEVEL_DEBUG,
                                                 strFunctionName,
                                                 gHSLMPELib_strModuleName) == _FALSE) return(SetLastReturnCodeAndReturn(INVALID_PARAM_TYPE_RET_CODE));

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::START,
                                        TRACE_LEVEL_DEBUG,
                                        "i_intTraceLevel = " + IStr(i_intTraceLevel),
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      gHSLMPELib_intTraceLevel = i_intTraceLevel;

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_DEBUG,
                                        "",
                                        strFunctionName,
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);

      return(SUCCESS);
    } // SetTraceLevel


    //##############################################################################################
    // PRIVATE HSL FUNCTION IMPLEMENTATIONS
    //##############################################################################################

	//----------------------------------------------------------------------------------------------
    // private function TraceEvent, subscribes the trace to the COM objects trace event.
    //----------------------------------------------------------------------------------------------
    global private function gHSLMPELib_hdlCommunication_TraceEvent(variable message, variable traceLevel) void
    {
	  HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::PROGRESS,
                                        traceLevel,
                                        message,
                                        "COM Interop",
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);
    } // gHSLMPELib_hdlCommunication_TraceEvent

	//----------------------------------------------------------------------------------------------
    // global function LogStatus, called from driver to log using Venus.
    //----------------------------------------------------------------------------------------------
    global function gHSLMPELib_hdlCommunication_LogStatus(string message) void
    {
	  Trace(message);
    }

	//----------------------------------------------------------------------------------------------
    // private function SetLastReturnCodeAndReturn
    //----------------------------------------------------------------------------------------------
    private function SetLastReturnCodeAndReturn(variable i_intReturnCode) variable
    {
	  variable strFunctionName("");
	  
	  if(HAMILTON_MPE_DEPENDENCIES::ExtractFunctionName(GetFunctionName(),
                                                   strFunctionName,
                                                   gHSLMPELib_strModuleName) == _FALSE)
      {
        gHSLMPELib_intLastReturnCode = EXTRACT_FUNC_NAME_FAIL_RET_CODE;
      }
	  else if (HAMILTON_MPE_DEPENDENCIES::CheckInteger(i_intReturnCode, "i_intReturnCode", strFunctionName, gHSLMPELib_strModuleName) == _FALSE)
      {
        gHSLMPELib_intLastReturnCode = INVALID_PARAM_TYPE_RET_CODE;
      }
      else
      {
        gHSLMPELib_intLastReturnCode = i_intReturnCode;
      }

      return(gHSLMPELib_intLastReturnCode);
    }

    //----------------------------------------------------------------------------------------------
    // private function _InitializeLibrary
    //----------------------------------------------------------------------------------------------
    private function _InitializeLibrary(variable i_strCallingFunctionName) variable
    {
      if(gHSLMPELib_blnInitialized) return(_TRUE);

      RegisterAbortHandler("_CleanUp");

      gHSLMPELib_blnInitialized = _TRUE;

      return(_TRUE);
    } // _InitializeLibrary

    //----------------------------------------------------------------------------------------------
    // private function _CreateObject
    //----------------------------------------------------------------------------------------------
    private function _CreateObject(variable i_strCallingFunctionName) variable
    {
      onerror goto DLL_ERROR;
      
      if(gHSLMPELib_hdlCommunication.CreateObject("HamiltonMPE.HSLMPE", _TRUE) == 0)
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unable to create object!",
                                          i_strCallingFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

        return(_FALSE);
      }

      onerror goto 0;

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::PROGRESS,
                                          TRACE_LEVEL_DEBUG,
                                          "Object created",
                                          i_strCallingFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);

      return(_TRUE);

      DLL_ERROR:
      {
        HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                          TRACE_LEVEL_RELEASE,
                                          "Unhandled exception in dll or dll missing!",
                                          i_strCallingFunctionName,
                                          gHSLMPELib_intTraceLevel,
                                          gHSLMPELib_strModuleName);
        return(_FALSE);
      }
    } // _CreateObject

    //----------------------------------------------------------------------------------------------
    // private function _CleanUp
    //----------------------------------------------------------------------------------------------
    private function _CleanUp() void
    {
      if(!gHSLMPELib_hdlCommunication.IsNull())
      {
        gHSLMPELib_hdlCommunication.Abort();

        if(gHSLMPELib_hdlCommunication.ReleaseObject() == 0)
        {
          HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE_WITH_ERROR,
                                            TRACE_LEVEL_RELEASE,
                                            "Unable to release object!",
                                            "_CleanUp (OnAbort)",
                                            gHSLMPELib_intTraceLevel,
                                            gHSLMPELib_strModuleName);
        }
      }

      HAMILTON_MPE_DEPENDENCIES::StatusTrace(HAMILTON_MPE_DEPENDENCIES::ACTION::COMPLETE,
                                        TRACE_LEVEL_RELEASE,
                                        "",
                                        "_CleanUp (OnAbort)",
                                        gHSLMPELib_intTraceLevel,
                                        gHSLMPELib_strModuleName);
    }
}  // HSLMPELib 
#endif
// $$author=cuciak_c$$valid=1$$time=2021-03-11 16:08$$checksum=3271c5cf$$length=085$$